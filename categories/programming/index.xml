<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Jparangdev&#39;s blog</title>
    <link>/categories/programming/</link>
    <description>Recent content in programming on Jparangdev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2021 14:06:00 +0900</lastBuildDate><atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2021년엔 M.S.A로</title>
      <link>/posts/programming/msa/</link>
      <pubDate>Sun, 14 Feb 2021 14:06:00 +0900</pubDate>
      
      <guid>/posts/programming/msa/</guid>
      <description>MSA ( Micro Service Architecture ) 이미 많은 유명한 기업에선 MSA를 많이 채택하고 있다.
거기에 따라 MSA에 대하여 자세하고 이해하기 쉽게 정리해둔 포스팅도 많으나 이번에도 역시 스스로의 생각을 정리하고 기록하자는 의미에서 포스팅을 남겨본다.잘못된 내용이나 주관적인 생각이 들어갈 수 있음을 미리 양해를 구한다.
일단 정말 잘 정리해둔 몇개의 포스팅을 링크해본다. 이미 구글 상위권 검색을 차지하고 있지만..
참조
https://velog.io/@tedigom/MSA-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1-MSA%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-3sk28yrv0e
https://www.samsungsds.com/kr/insights/msa.html
The term &amp;ldquo;Microservice Architecture&amp;rdquo; has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services.</description>
    </item>
    
    <item>
      <title>Event-driven이 뭐지?</title>
      <link>/posts/programming/event-driven/</link>
      <pubDate>Mon, 01 Feb 2021 21:23:00 +0900</pubDate>
      
      <guid>/posts/programming/event-driven/</guid>
      <description>간간이 기술 블로그나 유튜브를 보다 보면 Event-Driven Programming , Event-Driven Architecture 등등 Event-Driven이라는 단어가 많이 보인다. 대충 어림짐작으로 생각했을 때는 비동기적으로 처리되는 이벤트들을 실시간으로 잘 처리 해주는 것이 이벤트 드리븐이 아닐까? 라는 생각을 했다.
이번 포스팅으로 스스로 정리하는 시간을 가지려 한다. 먼저 wikipedia 를 찾아봤다.
Event-driven architecture
Event-driven architecture (EDA) is a software architecture paradigm promoting the production, detection, consumption of, and reaction to events.
이벤트 드리븐 아키텍쳐란 이벤트를 중심으로 생산,감지,소비,반응을 촉진하는 소프트웨어 패러다임이라 한다.</description>
    </item>
    
  </channel>
</rss>
