<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jparagdev&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Jparagdev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Feb 2021 21:23:00 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event-driven이 뭐지</title>
      <link>/posts/programming/event-driven/</link>
      <pubDate>Mon, 01 Feb 2021 21:23:00 +0900</pubDate>
      
      <guid>/posts/programming/event-driven/</guid>
      <description>간간이 기술 블로그나 유튜브를 보다 보면 Event-Driven Programming , Event-Driven Architecture 등등 Event-Driven이라는 단어가 많이 보인다. 대충 어림짐작으로 생각했을 때는 비동기적으로 처리되는 이벤트들을 실시간으로 잘 처리 해주는 것이 이벤트 드리븐이 아닐까? 라는 생각을 했다.
이번 포스팅으로 스스로 정리하는 시간을 가지려 한다. 먼저 wikipedia 를 찾아봤다.
Event-driven architecture
Event-driven architecture (EDA) is a software architecture paradigm promoting the production, detection, consumption of, and reaction to events.
이벤트 드리븐 아키텍쳐란 이벤트를 중심으로 생산,감지,소비,반응을 촉진하는 소프트웨어 패러다임이라 한다.</description>
    </item>
    
    <item>
      <title>github.io 블로그 만들기 - 2</title>
      <link>/posts/blog/hugo-2/</link>
      <pubDate>Thu, 21 Jan 2021 21:00:00 +0900</pubDate>
      
      <guid>/posts/blog/hugo-2/</guid>
      <description>이전 블로그에 이어 이번엔 테마를 설정해보도록 하겠다.
https://themes.gohugo.io/tags/blog/
위 페이지에 접속하여 원하는 테마를 골라보도록 하자. 일반적으로 모든 테마에서는 설치법과 기본적인 사용법이 개발자분들이 적어 놓은 경우가 많아 이를 참고하는것이 좋긴하다.
일단 내가 적용했던 방법을 기록해본다.
간편하게 생성했던 프로젝트 파일 themes 아래 서브모듈로 추가하거나 (테마제작자의 업데이트가 상관없는경우 가능)
$ git clone &amp;lt;테마 Git주소&amp;gt; themes/&amp;lt;테마이름&amp;gt; $ git submodule add &amp;lt;테마 Git주소&amp;gt; themes/&amp;lt;테마이름&amp;gt; 아니면 직접 다운받아 themes폴더 아래에 위치시켜주면 된다.
이후 config.toml파일을 각 테마에 맞게 수정해줘야한다.</description>
    </item>
    
    <item>
      <title>github.io 블로그 만들기 - 1</title>
      <link>/posts/blog/hugo-1/</link>
      <pubDate>Sun, 17 Jan 2021 20:45:00 +0900</pubDate>
      
      <guid>/posts/blog/hugo-1/</guid>
      <description>기록은 힘이다 말이 있듯이 자신만의 지식 아카이브를 만들어 두는 것은 큰 도움이 된다. 다른사람에게 정보 전달의 목적도 있지만 나 자신의 생각을 정리하기 위해 블로그를 기록하기로 한다.
github는 간편하면서 무료로 호스팅을 한다. 다만, 정적인 페이지로만 생성이 가능
내가 만들 블로그의 경우는 방문자에게 정보 전달만이 목적이기에 Static Website로 구성 현재는 많은 개발자분들이 Github를 통해 블로그를 구축하는듯 하다
먼저 블로그를 구축하기전에 Git에 대한 기본적이 지식이 필요하다. Git에 대한 정보는 이미 웹에 많은 좋은 기록이 많기 때문에 따로 다루진 않는다.</description>
    </item>
    
    <item>
      <title>Kafka 알아보기 - 1</title>
      <link>/posts/kafka/about-kafka-1/</link>
      <pubDate>Wed, 16 Dec 2020 21:43:00 +0900</pubDate>
      
      <guid>/posts/kafka/about-kafka-1/</guid>
      <description>1. What is Kafka ?   https://www.confluent.io/blog/kafka-fastest-messaging-system
  Apache Kafka is an evnet streaming platform Kafka는 오픈소스 분산메세지 플랫폼이다. 실시간으로 대량의 스트림(메세지)를 처리하는데 적합한 Messaging Queue(MQ)의 일종 Kafka는 대용량의 메세지 처리가 필요한 링크드인에서 개발해 2011년 아파치의 공식 오픈소스로 공개되었다. 다른 분산 메세징 시스템에 비해 비교적 우수한 성능을 보여주어, 현재 많은 기업에서 사용중이라고 한다.
2. Kafka Process   Kafka의 기본 구조
  Kafka는 기본적으로 Publish/Subscribe 구조를 사용한다. Producer가 메세지를 발행(Publish)하면 Topic을 구독(Subscribe)하는 Consumer가 메세지를 소비하는 구조 거기에 Broker(Kafka)가 둘 사이를 중계하며 메세지를 효율적으로 전달하는 역할을 한다.</description>
    </item>
    
  </channel>
</rss>
